@use "breakpoints" as b;
@use "sass:math";

// We are creating a grid
// Here we create the total number
// of columns in our grid system
$grid-columns: 20;

// map of grid gaps
$grid-gaps: (
  "0": 0,
  "1": 10px,
  "2": 20px,
  "3": 30px,
  "4": 40px,
  "5": 50px,
);

// base layout classes
.container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
  box-sizing: border-box; // padding, margin, border apart of total width.
}

.row {
  display: flex;
  flex-flow: row wrap; // push extra elements to next row down
}

// grid gap classes
@each $key, $value in $grid-gaps {
  .gap-#{$key} > * {
    // get immediate child element (usually a col class)
    padding: #{$value};
  }
  .gap-#{$key} {
    margin-left: -$value;
    margin-right: -$value;
  }
}

// column classes
// example from other libraries: .col-xs.12, .col-md-6
// means if screen is xs, give element a width of 12 columns

@include b.xs {
  @for $i from 1 through $grid-columns {
    .col-xs-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
      // defining the width based on the number of
      // columns you wish the element to take up
    }
  }
}

@include b.sm {
  @for $i from 1 through $grid-columns {
    .col-sm-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include b.md {
  @for $i from 1 through $grid-columns {
    .col-md-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include b.lg {
  @for $i from 1 through $grid-columns {
    .col-lg-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include b.xl {
  @for $i from 1 through $grid-columns {
    .col-xl-#{$i} {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
